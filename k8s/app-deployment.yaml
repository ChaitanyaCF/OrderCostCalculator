apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-cost-calculator
  namespace: order-cost-calculator
  labels:
    app: order-cost-calculator
    version: v1.0.0
    component: fullstack
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: order-cost-calculator
  template:
    metadata:
      labels:
        app: order-cost-calculator
        version: v1.0.0
        component: fullstack
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      containers:
      - name: order-cost-calculator
        image: order-cost-calculator:latest
        imagePullPolicy: Always
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          fsGroup: 1000
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
        ports:
        - name: frontend
          containerPort: 3000
          protocol: TCP
        - name: backend
          containerPort: 8082
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: SPRING_DATASOURCE_URL
          value: "jdbc:h2:file:/app/data/procostdb_new;AUTO_SERVER=TRUE"
        - name: SPRING_SQL_INIT_MODE
          value: "never"
        - name: SPRING_JPA_DEFER_DATASOURCE_INITIALIZATION
          value: "false"
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: order-cost-calculator-secrets
              key: openai-api-key
        - name: OPENAI_MODEL
          value: "gpt-4o-mini"
        - name: OPENAI_API_URL
          value: "https://api.openai.com/v1/chat/completions"
        - name: OPENAI_TEMPERATURE
          value: "0.1"
        - name: JAVA_OPTS
          value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=60.0 -XX:+UseG1GC -XX:+UseStringDeduplication"
        - name: LOGGING_LEVEL_COM_PROCOST_API_CONTROLLER_ZAPIERDATACONTROLLER
          value: "INFO"
        - name: LOGGING_LEVEL_COM_PROCOST_API_SERVICE_HYBRIDEMAILPROCESSOR
          value: "INFO"
        - name: LOGGING_LEVEL_COM_PROCOST_API_SERVICE_OPENAISERVICE
          value: "INFO"
        volumeMounts:
        - name: data-storage
          mountPath: /app/data
        - name: logs-storage
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8082
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /api/health
            port: 8082
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: data-storage
        persistentVolumeClaim:
          claimName: order-cost-calculator-data
      - name: logs-storage
        persistentVolumeClaim:
          claimName: order-cost-calculator-logs
      - name: config
        configMap:
          name: order-cost-calculator-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  name: order-cost-calculator-service
  namespace: order-cost-calculator
  labels:
    app: order-cost-calculator
spec:
  selector:
    app: order-cost-calculator
  ports:
  - name: frontend
    port: 3000
    targetPort: 3000
    protocol: TCP
  - name: backend
    port: 8082
    targetPort: 8082
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Secret
metadata:
  name: order-cost-calculator-secrets
  namespace: order-cost-calculator
type: Opaque
data:
  # Base64 encoded OpenAI API key - REPLACE WITH YOUR ACTUAL KEY
  # To encode: echo -n "your-actual-api-key" | base64
  openai-api-key: eW91ci1vcGVuYWktYXBpLWtleS1oZXJl  # "your-openai-api-key-here" in base64
